/**
 * Google Translate API Integration
 * Server-side translation to avoid CORS issues and provide caching
 */
// @ts-nocheck

import type { RequestHandler } from '@builder.io/qwik-city';

// In-memory cache for translations (in production, use Redis or database)
const translationCache = new Map<string, string>();

export const onPost: RequestHandler = async ({ json, request, env }) => {
  try {
    console.log('üì• Translation API called');
    const requestBody = await request.json();
    console.log('üìã Request body:', requestBody);

    const { text, targetLanguage, sourceLanguage = 'en' } = requestBody;

    // Validate input
    if (!text || !targetLanguage) {
      return json(400, {
        success: false,
        error: 'Missing required parameters: text and targetLanguage'
      });
    }

    // Return original text if target language is English
    if (targetLanguage === 'en' || targetLanguage === sourceLanguage) {
      return json(200, {
        success: true,
        translatedText: text,
        cached: false,
        sourceLanguage,
        targetLanguage
      });
    }

    // Check cache first
    const cacheKey = `${sourceLanguage}-${targetLanguage}-${text}`;
    if (translationCache.has(cacheKey)) {
      return json(200, {
        success: true,
        translatedText: translationCache.get(cacheKey),
        cached: true,
        sourceLanguage,
        targetLanguage
      });
    }

    // Get Google Translate API key from environment
    const apiKey = env.get('GOOGLE_TRANSLATE_API_KEY') || process.env.GOOGLE_TRANSLATE_API_KEY;

    if (!apiKey) {
      console.warn('Google Translate API key not found, using mock translations for demo');

      // Mock translations for demonstration (replace with real API when key is added)
      const mockTranslations: Record<string, Record<string, string>> = {
        fr: {
          // Main interface
          'UBI Compass': 'Boussole RUB',
          'Comprehensive UBI Policy Analysis with Real Canadian Data': 'Analyse Compl√®te des Politiques de RUB avec des Donn√©es Canadiennes R√©elles',
          'Powered by Statistics Canada ‚Ä¢ 2000-2023 Economic Data': 'Aliment√© par Statistique Canada ‚Ä¢ Donn√©es √âconomiques 2000-2023',

          // Analysis Parameters
          'Analysis Parameters': 'Param√®tres d\'Analyse',
          'Analysis Year': 'Ann√©e d\'Analyse',
          'Adult UBI (Annual)': 'RUB Adulte (Annuel)',
          'Child UBI (Monthly)': 'RUB Enfant (Mensuel)',
          'Child Age Cutoff': '√Çge Limite Enfant',

          // Tax Parameters
          'Tax Parameters': 'Param√®tres Fiscaux',
          'Flat Tax Percentage': 'Pourcentage d\'Imp√¥t Uniforme',
          'Tax Exemption Amount': 'Montant d\'Exemption Fiscale',

          // Results
          'UBI Program Feasibility': 'Faisabilit√© du Programme RUB',
          'Gross Program Cost': 'Co√ªt Brut du Programme',
          'Tax Revenue': 'Revenus Fiscaux',
          'Net Program Cost': 'Co√ªt Net du Programme',
          'Feasibility Assessment': '√âvaluation de Faisabilit√©',

          // Economic Context
          'Economic Context': 'Contexte √âconomique',
          'Canadian GDP': 'PIB Canadien',
          'Federal Budget': 'Budget F√©d√©ral',
          'Provincial Budgets': 'Budgets Provinciaux',
          'Adult Population': 'Population Adulte',
          'Child Population': 'Population Enfantine',
          'Inflation Rate': 'Taux d\'Inflation',
          'years': 'ans',
          '= Estimated data ‚Ä¢ No symbol = Real Statistics Canada data': '= Donn√©es estim√©es ‚Ä¢ Aucun symbole = Vraies donn√©es de Statistique Canada',

          // Additional missing translations
          'No tax on first': 'Aucun imp√¥t sur les premiers',
          'of income': 'de revenu',
          'Children under': 'Les enfants de moins de',
          'receive child UBI': 're√ßoivent le RUB enfant',

          // Form labels that might have different text
          'Child Age Cutoff:': '√Çge Limite Enfant:',
          'Child Age Cutoff': '√Çge Limite Enfant',
          'Children under 18 receive child UBI': 'Les enfants de moins de 18 re√ßoivent le RUB enfant',
          'Flat Tax Percentage:': 'Pourcentage d\'Imp√¥t Uniforme:',
          'Flat Tax Percentage': 'Pourcentage d\'Imp√¥t Uniforme',
          'Tax Exemption Amount:': 'Montant d\'Exemption Fiscale:',
          'Tax Exemption Amount': 'Montant d\'Exemption Fiscale',
          'No tax on first $24k of income': 'Aucun imp√¥t sur les premiers $24k de revenu',

          // Dynamic text patterns (these might be constructed with variables)
          'No tax on first': 'Aucun imp√¥t sur les premiers',
          'of income': 'de revenu',
          '% of GDP': '% du PIB',
          '% of Government Budget': '% du Budget Gouvernemental',

          // Feasibility levels
          'FEASIBLE': 'FAISABLE',
          'CHALLENGING': 'DIFFICILE',
          'DIFFICULT': 'TR√àS DIFFICILE',

          // Data quality
          'Complete': 'Compl√®tes',
          'Excellent': 'Excellentes',
          'Good': 'Bonnes',
          'Partial': 'Partielles',
          'Complete Statistics Canada data': 'Donn√©es compl√®tes de Statistique Canada',
          'Excellent Statistics Canada data': 'Excellentes donn√©es de Statistique Canada',
          'Good Statistics Canada data': 'Bonnes donn√©es de Statistique Canada',
          'Complete data (6/6 datasets)': 'Donn√©es compl√®tes (6/6 ensembles de donn√©es)',
          'Excellent data (5/6 datasets + historical GDP)': 'Excellentes donn√©es (5/6 ensembles + PIB historique)',
          'Good data (4/6 datasets + historical GDP)': 'Bonnes donn√©es (4/6 ensembles + PIB historique)',
          'month': 'mois',
          'year': 'ann√©e',
          'Complete data coverage (6/6 datasets)': 'Couverture compl√®te des donn√©es (6/6 ensembles de donn√©es)',
          'Excellent coverage (5/6 datasets + historical GDP)': 'Excellente couverture (5/6 ensembles + PIB historique)',
          'Good coverage (4/6 datasets + historical GDP)': 'Bonne couverture (4/6 ensembles + PIB historique)',

          // Dropdown labels
          'Complete Data (All 6 Datasets)': 'Donn√©es Compl√®tes (6/6 Ensembles de Donn√©es)',
          'Excellent Data (5/6 Datasets + Historical GDP)': 'Excellentes Donn√©es (5/6 Ensembles + PIB Historique)',
          'Good Data (4/6 Datasets + Historical GDP)': 'Bonnes Donn√©es (4/6 Ensembles + PIB Historique)',

          // Additional text
          'under': 'de moins de',
          '$22/month (rural)': '$22/mois (zone rurale)',

          // Methodology section
          'Feasibility Assessment Methodology': 'M√©thodologie d\'√âvaluation de Faisabilit√©',
          'GDP Percentage Thresholds': 'Seuils de Pourcentage du PIB',
          'Based on international economic research and existing social program scales.': 'Bas√© sur la recherche √©conomique internationale et l\'√©chelle des programmes sociaux existants.',
          'Economic Context': 'Contexte √âconomique',
          'Canadian GDP 2022': 'PIB Canadien 2022',
          'Total Gov\'t Spending': 'D√©penses Gouvernementales Totales',
          'Current Social Programs': 'Programmes Sociaux Actuels',
          'UBI would be the largest social program in Canadian history.': 'Le RUB serait le plus grand programme social de l\'histoire canadienne.',
          'International Benchmarks': 'R√©f√©rences Internationales',
          'Finland UBI Trial': 'Essai RUB Finlandais',
          'Kenya GiveDirectly': 'Kenya GiveDirectly',
          'kenyaGiveDirectly': 'Kenya GiveDirectly',
          'Alaska Dividend': 'Dividende de l\'Alaska',
          'Most UBI pilots are much smaller than full implementation.': 'La plupart des projets pilotes RUB sont beaucoup plus petits qu\'une mise en ≈ìuvre compl√®te.',

          // Important Considerations section
          'Important Considerations': 'Consid√©rations Importantes',
          'This analysis considers NET cost (gross UBI cost minus tax revenue generated), but does not account for:': 'Cette analyse consid√®re le co√ªt NET (co√ªt brut du RUB moins les revenus fiscaux g√©n√©r√©s), mais ne tient pas compte de :',
          'Savings from replacing existing programs (welfare, unemployment insurance)': '√âconomies en rempla√ßant les programmes existants (aide sociale, assurance-ch√¥mage)',
          'Economic multiplier effects and increased consumer spending': 'Effets multiplicateurs √©conomiques et augmentation des d√©penses de consommation',
          'Reduced administrative costs compared to means-tested programs': 'Co√ªts administratifs r√©duits par rapport aux programmes sous condition de ressources',
          'Potential productivity gains and entrepreneurship increases': 'Gains de productivit√© potentiels et augmentation de l\'entrepreneuriat',
          'Health and education benefits that reduce long-term costs': 'Avantages en sant√© et √©ducation qui r√©duisent les co√ªts √† long terme',

          // Data Sources section
          'Data Sources:': 'Sources de Donn√©es :',
          'Analysis covers 2008-2022 with comprehensive economic indicators.': 'L\'analyse couvre 2008-2022 avec des indicateurs √©conomiques complets.'
        },

          // Support section
          'Support Development': 'Soutenir le D√©veloppement',
          'Keeping UBI Compass Free & Global': 'Garder UBI Compass Gratuit et Mondial',
          'Your support helps cover translation costs and keeps this tool accessible worldwide.': 'Votre soutien aide √† couvrir les co√ªts de traduction et maintient cet outil accessible dans le monde entier.',
          'Buy Me a Coffee': 'Offrez-moi un Caf√©',
          'UBI Compass is free for everyone. If it\'s valuable to you, consider supporting development.': 'UBI Compass est gratuit pour tous. Si cela vous est utile, consid√©rez soutenir le d√©veloppement.',
        es: {
          // Main interface
          'UBI Compass': 'Br√∫jula RUB',
          'Comprehensive UBI Policy Analysis with Real Canadian Data': 'An√°lisis Integral de Pol√≠ticas RUB con Datos Canadienses Reales',
          'Powered by Statistics Canada ‚Ä¢ 2000-2023 Economic Data': 'Impulsado por Statistics Canada ‚Ä¢ Datos Econ√≥micos 2000-2023',

          // Analysis Parameters
          'Analysis Parameters': 'Par√°metros de An√°lisis',
          'Analysis Year': 'A√±o de An√°lisis',
          'Adult UBI (Annual)': 'RUB Adulto (Anual)',
          'Child UBI (Monthly)': 'RUB Infantil (Mensual)',
          'Child Age Cutoff': 'L√≠mite de Edad Infantil',

          // Tax Parameters
          'Tax Parameters': 'Par√°metros Fiscales',
          'Flat Tax Percentage': 'Porcentaje de Impuesto Uniforme',
          'Tax Exemption Amount': 'Monto de Exenci√≥n Fiscal',

          // Results
          'UBI Program Feasibility': 'Viabilidad del Programa RUB',
          'Gross Program Cost': 'Costo Bruto del Programa',
          'Tax Revenue': 'Ingresos Fiscales',
          'Net Program Cost': 'Costo Neto del Programa',
          'Feasibility Assessment': 'Evaluaci√≥n de Viabilidad',

          // Economic Context
          'Economic Context': 'Contexto Econ√≥mico',
          'Canadian GDP': 'PIB Canadiense',
          'Federal Budget': 'Presupuesto Federal',
          'Provincial Budgets': 'Presupuestos Provinciales',
          'Adult Population': 'Poblaci√≥n Adulta',
          'Child Population': 'Poblaci√≥n Infantil',
          'Inflation Rate': 'Tasa de Inflaci√≥n',
          'years': 'a√±os',
          '= Estimated data ‚Ä¢ No symbol = Real Statistics Canada data': '= Datos estimados ‚Ä¢ Sin s√≠mbolo = Datos reales de Statistics Canada',

          // Additional text
          'under': 'menores de',
          '$22/month (rural)': '$22/mes (zona rural)',

          // Dropdown labels
          'Complete Data (All 6 Datasets)': 'Datos Completos (6/6 Conjuntos de Datos)',
          'Excellent Data (5/6 Datasets + Historical GDP)': 'Excelentes Datos (5/6 Conjuntos + PIB Hist√≥rico)',
          'Good Data (4/6 Datasets + Historical GDP)': 'Buenos Datos (4/6 Conjuntos + PIB Hist√≥rico)',

          // Form labels
          'No tax on first': 'Sin impuesto en los primeros',
          'of income': 'de ingresos',
          'Children under': 'Ni√±os menores de',
          'receive child UBI': 'reciben RUB infantil',
          '% of GDP': '% del PIB',
          '% of Government Budget': '% del Presupuesto Gubernamental',

          // Feasibility levels
          'FEASIBLE': 'VIABLE',
          'CHALLENGING': 'DESAFIANTE',
          'DIFFICULT': 'DIF√çCIL',

          // Data quality
          'Complete': 'Completos',
          'Excellent': 'Excelentes',
          'Good': 'Buenos',
          'Complete data coverage (6/6 datasets)': 'Cobertura completa de datos (6/6 conjuntos de datos)',
          'Excellent coverage (5/6 datasets + historical GDP)': 'Excelente cobertura (5/6 conjuntos + PIB hist√≥rico)',
          'Good coverage (4/6 datasets + historical GDP)': 'Buena cobertura (4/6 conjuntos + PIB hist√≥rico)',

          // Data Sources
          'Data Sources:': 'Fuentes de Datos:',
          'Analysis covers 2008-2022 with comprehensive economic indicators.': 'El an√°lisis cubre 2008-2022 con indicadores econ√≥micos integrales.',

          // Support section
          'Support Development': 'Apoyar el Desarrollo',
          'Keeping UBI Compass Free & Global': 'Mantener UBI Compass Gratuito y Global',
          'Your support helps cover translation costs and keeps this tool accessible worldwide.': 'Su apoyo ayuda a cubrir los costos de traducci√≥n y mantiene esta herramienta accesible en todo el mundo.',
          'Buy Me a Coffee': 'C√≥mprame un Caf√©',
          'UBI Compass is free for everyone. If it\'s valuable to you, consider supporting development.': 'UBI Compass es gratuito para todos. Si le resulta valioso, considere apoyar el desarrollo.'
        },
        pt: {
          'UBI Compass': 'B√∫ssola RBU',
          'Comprehensive UBI Policy Analysis with Real Canadian Data': 'An√°lise Abrangente de Pol√≠ticas de RBU com Dados Canadenses Reais',
          'Analysis Parameters': 'Par√¢metros de An√°lise',
          'Economic Context': 'Contexto Econ√¥mico'
        }
      };

      const mockTranslated = mockTranslations[targetLanguage]?.[text] || text;

      console.log(`üîç Mock translation lookup:`);
      console.log(`  Text: "${text}"`);
      console.log(`  Target: ${targetLanguage}`);
      console.log(`  Found: "${mockTranslated}"`);
      console.log(`  Available keys:`, Object.keys(mockTranslations[targetLanguage] || {}));

      // Cache the mock translation
      translationCache.set(cacheKey, mockTranslated);

      return json(200, {
        success: true,
        translatedText: mockTranslated,
        cached: false,
        sourceLanguage,
        targetLanguage,
        warning: 'Using mock translations - add GOOGLE_TRANSLATE_API_KEY for real translations'
      });
    }

    // Call Google Translate API
    const translateUrl = `https://translation.googleapis.com/language/translate/v2?key=${apiKey}`;

    console.log(`üîÑ Calling Google Translate API for: "${text}" (${sourceLanguage} ‚Üí ${targetLanguage})`);

    const response = await fetch(translateUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        q: text,
        source: sourceLanguage,
        target: targetLanguage,
        format: 'text'
      })
    });

    console.log(`üì° Google Translate API response status: ${response.status}`);

    if (!response.ok) {
      const errorData = await response.text();
      console.error('‚ùå Google Translate API error:', {
        status: response.status,
        statusText: response.statusText,
        error: errorData
      });

      return json(200, {
        success: true,
        translatedText: text, // Fallback to original text
        cached: false,
        sourceLanguage,
        targetLanguage,
        warning: `Translation API error: ${response.status} ${response.statusText}`,
        debug: { status: response.status, error: errorData }
      });
    }

    const data = await response.json();
    console.log(`‚úÖ Google Translate API response:`, data);

    const translatedText = data.data.translations[0].translatedText;
    console.log(`üéØ Final translation: "${text}" ‚Üí "${translatedText}"`);

    // Cache the translation
    translationCache.set(cacheKey, translatedText);

    return json(200, {
      success: true,
      translatedText,
      cached: false,
      sourceLanguage,
      targetLanguage
    });

  } catch (error) {
    console.error('Translation API error:', error);
    
    return json(500, {
      success: false,
      error: 'Translation service error',
      details: error instanceof Error ? error.message : 'Unknown error'
    });
  }
};

// GET endpoint for health check
export const onGet: RequestHandler = async ({ json }) => {
  const apiKey = process.env.GOOGLE_TRANSLATE_API_KEY;
  
  return json(200, {
    success: true,
    status: 'Translation API ready',
    configured: !!apiKey,
    cacheSize: translationCache.size,
    supportedLanguages: [
      'en', 'fr', 'es', 'pt', 'de', 'it', 'ru', 'zh', 'ja', 'ko', 
      'ar', 'hi', 'nl', 'sv', 'da', 'no', 'fi', 'pl', 'tr', 'uk',
      'cs', 'hu', 'ro', 'bg', 'hr', 'sk', 'sl', 'et', 'lv', 'lt'
    ]
  });
};
